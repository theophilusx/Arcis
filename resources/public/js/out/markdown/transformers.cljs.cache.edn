;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name markdown.transformers, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :uses nil, :defs {italics {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 117, :column 7, :end-line 117, :end-column 14, :arglists (quote ([text state]))}, :name markdown.transformers/italics, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 14, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, h2? {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 18, :column 7, :end-line 18, :end-column 10, :arglists (quote ([text]))}, :name markdown.transformers/h2?, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 10, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, separator {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 73, :column 7, :end-line 73, :end-column 16, :arglists (quote ([escape? text open close separator state]))}, :name markdown.transformers/separator, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 16, :method-params ([escape? text open close separator state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 6, :fn-var true, :arglists (quote ([escape? text open close separator state]))}, make-heading {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 154, :column 7, :end-line 154, :end-column 19, :arglists (quote ([text heading-anchors]))}, :name markdown.transformers/make-heading, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 19, :method-params ([text heading-anchors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text heading-anchors]))}, *substring* {:name markdown.transformers/*substring*, :file "resources/public/js/out/markdown/transformers.cljs", :line 6, :column 1, :end-line 6, :end-column 38, :dynamic true, :declared true, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 6, :column 27, :end-line 6, :end-column 38, :dynamic true, :declared true}}, paragraph {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 212, :column 7, :end-line 212, :end-column 16, :arglists (quote ([text {:keys [eof heading hr code lists blockquote paragraph last-line-empty?], :as state}]))}, :name markdown.transformers/paragraph, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 16, :method-params ([text p__38206]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof heading hr code lists blockquote paragraph last-line-empty?], :as state}]))}, href {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 315, :column 7, :end-line 315, :end-column 11, :arglists (quote ([title link]))}, :name markdown.transformers/href, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 11, :method-params ([title link]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 2, :fn-var true, :arglists (quote ([title link]))}, blockquote {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 288, :column 7, :end-line 288, :end-column 17, :arglists (quote ([text {:keys [eof code codeblock lists], :as state}]))}, :name markdown.transformers/blockquote, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 17, :method-params ([text p__38214]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof code codeblock lists], :as state}]))}, img {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 318, :column 7, :end-line 318, :end-column 10, :arglists (quote ([alt url & [title]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(alt url [title])], :arglists ([alt url & [title]]), :arglists-meta (nil)}}, :name markdown.transformers/img, :variadic true, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(alt url [title])], :arglists ([alt url & [title]]), :arglists-meta (nil)}, :method-params [(alt url [title])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 2, :fn-var true, :arglists ([alt url & [title]])}, heading {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 161, :column 7, :end-line 161, :end-column 14, :arglists (quote ([text state]))}, :name markdown.transformers/heading, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 14, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, superscript {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 126, :column 7, :end-line 126, :end-column 18, :arglists (quote ([text state]))}, :name markdown.transformers/superscript, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 18, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, autourl-transformer {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 184, :column 7, :end-line 184, :end-column 26, :arglists (quote ([text state]))}, :name markdown.transformers/autourl-transformer, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 26, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, heading-text {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 143, :column 7, :end-line 143, :end-column 19, :arglists (quote ([text]))}, :name markdown.transformers/heading-text, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 19, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, h1? {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 15, :column 7, :end-line 15, :end-column 10, :arglists (quote ([text]))}, :name markdown.transformers/h1?, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 10, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, codeblock {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 250, :column 7, :end-line 250, :end-column 16, :arglists (quote ([text state]))}, :name markdown.transformers/codeblock, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 16, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, bold {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 111, :column 7, :end-line 111, :end-column 11, :arglists (quote ([text state]))}, :name markdown.transformers/bold, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 11, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, escape-link {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name markdown.transformers/escape-link, :variadic true, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, hr {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 277, :column 7, :end-line 277, :end-column 9, :arglists (quote ([text state]))}, :name markdown.transformers/hr, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, escape-code {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 27, :column 7, :end-line 27, :end-column 18, :arglists (quote ([s]))}, :name markdown.transformers/escape-code, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, ul {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 431, :column 7, :end-line 431, :end-column 9, :arglists (quote ([text state]))}, :name markdown.transformers/ul, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 431, :end-line 431, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, transformer-vector {:name markdown.transformers/transformer-vector, :file "resources/public/js/out/markdown/transformers.cljs", :line 483, :column 1, :end-line 483, :end-column 24, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 483, :column 6, :end-line 483, :end-column 24}}, autoemail-transformer {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 194, :column 7, :end-line 194, :end-column 28, :arglists (quote ([text state]))}, :name markdown.transformers/autoemail-transformer, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 28, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, add-row {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 409, :column 7, :end-line 409, :end-column 14, :arglists (quote ([row-type list-type num-indents indents content state]))}, :name markdown.transformers/add-row, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 14, :method-params ([row-type list-type num-indents indents content state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 409, :end-line 409, :max-fixed-arity 6, :fn-var true, :arglists (quote ([row-type list-type num-indents indents content state]))}, strong {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 108, :column 7, :end-line 108, :end-column 13, :arglists (quote ([text state]))}, :name markdown.transformers/strong, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 13, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, li {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 443, :column 7, :end-line 443, :end-column 9, :arglists (quote ([text {:keys [code codeblock last-line-empty? eof lists], :as state}]))}, :name markdown.transformers/li, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 9, :method-params ([text p__38276]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code codeblock last-line-empty? eof lists], :as state}]))}, formatter {:name markdown.transformers/formatter, :file "resources/public/js/out/markdown/transformers.cljs", :line 4, :column 1, :end-line 4, :end-column 36, :dynamic true, :declared true, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 4, :column 27, :end-line 4, :end-column 36, :dynamic true, :declared true}}, reference-link {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 389, :column 7, :end-line 389, :end-column 21, :arglists (quote ([text {:keys [code codeblock references], :as state}]))}, :name markdown.transformers/reference-link, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 21, :method-params ([text p__38251]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code codeblock references], :as state}]))}, *next-line* {:name markdown.transformers/*next-line*, :file "resources/public/js/out/markdown/transformers.cljs", :line 8, :column 1, :end-line 8, :end-column 31, :dynamic true, :declared true, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 8, :column 20, :end-line 8, :end-column 31, :dynamic true, :declared true}}, em {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 114, :column 7, :end-line 114, :end-column 9, :arglists (quote ([text state]))}, :name markdown.transformers/em, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, replace-reference-link {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 384, :column 7, :end-line 384, :end-column 29, :arglists (quote ([references reference]))}, :name markdown.transformers/replace-reference-link, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 29, :method-params ([references reference]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 2, :fn-var true, :arglists (quote ([references reference]))}, close-lists {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 403, :column 7, :end-line 403, :end-column 18, :arglists (quote ([lists]))}, :name markdown.transformers/close-lists, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 18, :method-params ([lists]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 403, :end-line 403, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lists]))}, heading-level {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 150, :column 7, :end-line 150, :end-column 20, :arglists (quote ([text]))}, :name markdown.transformers/heading-level, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 20, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, empty-line {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([text state]))}, :name markdown.transformers/empty-line, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 17, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, handle-img-link {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 325, :column 7, :end-line 325, :end-column 22, :arglists (quote ([xs]))}, :name markdown.transformers/handle-img-link, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 22, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, parse-reference {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 372, :column 7, :end-line 372, :end-column 22, :arglists (quote ([reference start]))}, :name markdown.transformers/parse-reference, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 22, :method-params ([reference start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reference start]))}, escaped-chars {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 52, :column 7, :end-line 52, :end-column 20, :arglists (quote ([text state]))}, :name markdown.transformers/escaped-chars, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 20, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, parse-reference-link {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 378, :column 7, :end-line 378, :end-column 27, :arglists (quote ([line references]))}, :name markdown.transformers/parse-reference-link, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 27, :method-params ([line references]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line references]))}, reference {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 369, :column 7, :end-line 369, :end-column 16, :arglists (quote ([text]))}, :name markdown.transformers/reference, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 16, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, heading? {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 10, :column 7, :end-line 10, :end-column 15, :arglists (quote ([text type]))}, :name markdown.transformers/heading?, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 15, :method-params ([text type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text type]))}, inline-code {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 120, :column 7, :end-line 120, :end-column 18, :arglists (quote ([text state]))}, :name markdown.transformers/inline-code, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 18, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, ol {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 437, :column 7, :end-line 437, :end-column 9, :arglists (quote ([text state]))}, :name markdown.transformers/ol, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 437, :end-line 437, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, strikethrough {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 123, :column 7, :end-line 123, :end-column 20, :arglists (quote ([text state]))}, :name markdown.transformers/strikethrough, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 20, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, link {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 341, :column 7, :end-line 341, :end-column 11, :arglists (quote ([text {:keys [code codeblock], :as state}]))}, :name markdown.transformers/link, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 11, :method-params ([text p__38230]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 341, :end-line 341, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code codeblock], :as state}]))}, code {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 229, :column 7, :end-line 229, :end-column 11, :arglists (quote ([text {:keys [eof lists code codeblock], :as state}]))}, :name markdown.transformers/code, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 11, :method-params ([text p__38209]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof lists code codeblock], :as state}]))}, br {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 177, :column 7, :end-line 177, :end-column 9, :arglists (quote ([text {:keys [code lists], :as state}]))}, :name markdown.transformers/br, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 9, :method-params ([text p__38201]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code lists], :as state}]))}, paragraph-text {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 208, :column 7, :end-line 208, :end-column 21, :arglists (quote ([last-line-empty? text]))}, :name markdown.transformers/paragraph-text, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 21, :method-params ([last-line-empty? text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([last-line-empty? text]))}, process-link-title {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/transformers.cljs", :line 334, :column 7, :end-line 334, :end-column 25, :arglists (quote ([title state]))}, :name markdown.transformers/process-link-title, :variadic false, :file "resources/public/js/out/markdown/transformers.cljs", :end-column 25, :method-params ([title state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 2, :fn-var true, :arglists (quote ([title state]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:codeblock :hr :lists :buf :ul :clojurescript :else :last-line-empty? :default :found-token :references :code-style :ol :code :heading-anchors :eof :paragraph :blockquote :heading}, :order [:code :codeblock :hr :heading :found-token :default :else :heading-anchors :lists :clojurescript :eof :blockquote :paragraph :last-line-empty? :code-style :references :ul :ol :buf]}, :doc nil}