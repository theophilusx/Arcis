;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name markdown.core, :imports nil, :requires {markdown.transformers markdown.transformers}, :uses {*substring* markdown.transformers, transformer-vector markdown.transformers, *next-line* markdown.transformers, parse-reference markdown.transformers, parse-reference-link markdown.transformers}, :defs {init-transformer {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/core.cljs", :line 5, :column 8, :end-line 5, :end-column 24, :private true, :arglists (quote ([{:keys [replacement-transformers custom-transformers]}]))}, :private true, :name markdown.core/init-transformer, :variadic false, :file "resources/public/js/out/markdown/core.cljs", :end-column 24, :method-params ([p__38109]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [replacement-transformers custom-transformers]}]))}, format {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/core.cljs", :line 18, :column 7, :end-line 18, :end-column 13, :arglists (quote ([fmt & args])), :doc "Removed from cljs.core 0.0-1885, Ref. http://goo.gl/su7Xkj", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}}, :name markdown.core/format, :variadic true, :file "resources/public/js/out/markdown/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}, :method-params [(fmt args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & args]), :doc "Removed from cljs.core 0.0-1885, Ref. http://goo.gl/su7Xkj"}, parse-references {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/core.cljs", :line 21, :column 7, :end-line 21, :end-column 23, :arglists (quote ([lines]))}, :name markdown.core/parse-references, :variadic false, :file "resources/public/js/out/markdown/core.cljs", :end-column 23, :method-params ([lines]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lines]))}, md->html {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/core.cljs", :line 27, :column 7, :end-line 27, :end-column 15, :arglists (quote ([text & params])), :doc "processes input text line by line and outputs an HTML string", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(text params)], :arglists ([text & params]), :arglists-meta (nil)}}, :name markdown.core/md->html, :variadic true, :file "resources/public/js/out/markdown/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(text params)], :arglists ([text & params]), :arglists-meta (nil)}, :method-params [(text params)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists ([text & params]), :doc "processes input text line by line and outputs an HTML string"}, mdToHtml {:protocol-inline nil, :meta {:file "/home/tcross/Projects/clojure/arcis/resources/public/js/out/markdown/core.cljs", :line 56, :column 16, :end-line 56, :end-column 24, :export true, :arglists (quote ([& params])), :doc "Js accessible wrapper", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(params)], :arglists ([& params]), :arglists-meta (nil)}}, :name markdown.core/mdToHtml, :variadic true, :file "resources/public/js/out/markdown/core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(params)], :arglists ([& params]), :arglists-meta (nil)}, :method-params [(params)], :protocol-impl nil, :export true, :arglists-meta (nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 0, :fn-var true, :arglists ([& params]), :doc "Js accessible wrapper"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:lists :buf :clojurescript :last-line-empty? :references :eof :reference-links? :custom-transformers :replacement-transformers}, :order [:replacement-transformers :custom-transformers :reference-links? :clojurescript :references :last-line-empty? :buf :lists :eof]}, :doc nil}